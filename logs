package main

import (
	"fmt"
	"github.com/go-vgo/robotgo"
)

func main() {
	// Keep track of the keys pressed
	var keysPressed []string

	// Start capturing keyboard events
	robotgo.EventHook(robotgo.KeyDown, []string{"z"}, func(e robotgo.Event) {
		// Add "z" to the keysPressed slice
		keysPressed = append(keysPressed, "z")

		// Check if "z" and "x" are both pressed
		if len(keysPressed) == 2 && keysPressed[0] == "z" && keysPressed[1] == "x" {
			// When "Z + X" is pressed, quit the app
			fmt.Println("Z + X was pressed. Quitting...")
			// Add your code to clean up or perform any necessary actions before quitting
			// Then, exit the application
			robotgo.EventEnd()
			// os.Exit(0) // Uncomment this line if you want to immediately exit the application
		}
	})

	// Remove the key from keysPressed when it's released
	robotgo.EventHook(robotgo.KeyUp, []string{"z"}, func(e robotgo.Event) {
		keysPressed = removeKey(keysPressed, "z")
	})

	robotgo.EventHook(robotgo.KeyDown, []string{"x"}, func(e robotgo.Event) {
		keysPressed = append(keysPressed, "x")
	})

	robotgo.EventHook(robotgo.KeyUp, []string{"x"}, func(e robotgo.Event) {
		keysPressed = removeKey(keysPressed, "x")
	})

	// Keep the program running to capture events
	robotgo.EventProcess()

	// Wait for program termination
	<-robotgo.EventProcessExited()
}

// Helper function to remove a key from the slice
func removeKey(keys []string, keyToRemove string) []string {
	var updatedKeys []string
	for _, key := range keys {
		if key != keyToRemove {
			updatedKeys = append(updatedKeys, key)
		}
	}
	return updatedKeys
}
